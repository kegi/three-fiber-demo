{"version":3,"sources":["util/terrain.ts","components/Sky.tsx","util/skyTime.ts","components/Terrain.tsx","components/Player.tsx","hooks/useKeyboard.ts","components/Ball.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AXIS","Sky","distance","timeAnimation","time","initialTime","sun","azimuth","turbidity","rayleigh","mieCoefficient","mieDirectionalG","stars","enabled","depth","count","factor","saturation","fade","sunriseStart","sunsetEnd","useState","split","map","n","parseInt","hours","degrees","timeToDeg","setTime","useFrame","newTime","speed","day","useMemo","night","sunrise","sunset","position","angle","Math","PI","y","cos","z","sin","ambientLightIntensity","returnInRange","intensity","max","min","sunriseEnd","args","color","Color","groundColor","castShadow","sunPosition","Stars","radius","Terrain","width","length","heights","unitSize","terrainGeometryRef","useRef","cannonHeight","heightfield","row","x","index","push","reverse","useHeightfield","mass","rotation","elementSize","useEffect","current","setAttribute","getAttribute","attributes","normal","positions","axis","console","log","Error","forEach","height","applyHeights","array","needsUpdate","error","rotation-x","receiveShadow","ref","attach","wireframe","frontVector","Vector3","sideVector","direction","Player","keys","Set","keysDown","setKeysDown","handleKeyDown","event","add","code","handleKeyUp","newSet","delete","document","addEventListener","removeEventListener","useKeyboard","movement","has","useSphere","type","api","camera","useThree","velocity","subscribe","newVelocity","frontVelocity","sideVelocity","copy","setY","set","subVectors","normalize","multiplyScalar","applyEuler","Ball","segments","smoothness","elevation","simplex","SimplexNoise","size","Array","fill","undefined","_","floor","noise2D","Float32Array","generateSimplexNoise","App","className","colorManagement","shadowMap","fov","penumbra","PointerLockControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e54e824f.chunk.js","sourcesContent":["import SimplexNoise from 'simplex-noise'\n\nexport enum AXIS {\n    x = 0,\n    y = 2,\n    z = 1,\n}\n\ninterface SimplexSettings {\n    smoothness ?: number\n    elevation ?: number\n}\n\nexport const applyHeights = (\n    positions:Float32Array,\n    heights:Float32Array,\n    axis = AXIS.y\n) => {\n    if(positions.length !== heights.length * 3){\n        console.log(positions.length, heights.length)\n        throw new Error('heights doesn\\'t match the geometry size')\n    }\n\n    heights.forEach((height, index) => {\n        positions[(index * 3) + axis] = height\n    })\n}\n\nexport const generateRandomHeights = (width:number, length:number, time:number = 0) => {\n    const size = (width + 1) * (length + 1)\n    const heights = Array(size).fill(undefined).map((_, index) => {\n\n        const y = Math.floor(index / (width + 1))\n        const x = index - (y * (width + 1))\n\n        return Math.cos(((x / width) * ((Math.PI * 2) * 2)) + time) * Math.cos(((y / length) * ((Math.PI * 2) * 2)) + time)\n    })\n\n    return new Float32Array(heights)\n}\n\nexport const generateSimplexNoise = (width:number, length:number, {\n    smoothness = 2,\n    elevation = 10,\n}:SimplexSettings = {}) => {\n    const simplex = new SimplexNoise()\n    const size = (width + 1) * (length + 1)\n\n    const heights = Array(size).fill(undefined).map((_, index) => {\n\n        const y = Math.floor(index / (width + 1))\n        const x = index - (y * (width + 1))\n\n        return simplex.noise2D(\n            (x / width) * smoothness,\n            (y / length) * smoothness,\n        ) * elevation\n    })\n    return new Float32Array(heights)\n}\n\nexport const getCenterAltitude = (\n    heights:Float32Array,\n    width: number,\n    length: number\n) => {\n    const x = Math.round((width + 1) / 2)\n    const z = Math.round((length + 1) / 2)\n    const index = (z * (width + 1)) + x\n    return heights[index]\n}\n\nconst randomInteger = (min: number, max: number) => Math.floor(Math.random() * (max - min) ) + min\n\nexport const getContacts  = (\n    heights:Float32Array,\n    width:number,\n    length:number,\n    nb:number,\n    minLevel = 1,\n    unitSize:number = 1\n) => {\n    const contacts = []\n\n    for(let i = 0; i < nb; i++){\n\n        const x = randomInteger(0, width + 1)\n        const z = randomInteger(0, length + 1)\n\n        const index = (z * (width + 1)) + x\n        \n        const y = heights[index]\n\n        if(y <= minLevel){\n            i--\n            continue\n        }\n\n        const halfWidth = width / 2\n        const halfLength = length / 2\n\n        contacts.push({\n            x: (x - halfWidth) * unitSize,\n            y,\n            z: (z - halfLength) * unitSize,\n        })\n    }\n\n    return contacts\n}","import { useState, useMemo } from 'react'\nimport { Color } from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport { Sky as R3fSky, Stars } from '@react-three/drei'\n\nimport { timeToDeg } from '../util/skyTime'\n\ninterface SunProps {\n    azimuth?: number\n    turbidity?: number\n    rayleigh?: number\n    mieCoefficient?: number\n    mieDirectionalG?: number\n}\n\ninterface StarsProps {\n    enabled?: boolean\n    depth?: number\n    count?: number\n    factor?: number\n    saturation?: number\n    fade?: boolean\n}\n\ninterface SkyProps {\n    distance?: number\n    timeAnimation?: boolean\n    time?: string\n    sun?: SunProps\n    stars?: StarsProps\n}\n\nconst Sky:React.FC<SkyProps> = ({\n    distance = 4000,\n    timeAnimation = true,\n    time : initialTime = '12h00',\n    sun = {\n        azimuth: 0,\n        turbidity: 1,\n        rayleigh: 1,\n        mieCoefficient: 0.035,\n        mieDirectionalG: 0.73,\n    },\n    stars = {\n        enabled: true,\n        depth: 50,\n        count: 100,\n        factor: 30,\n        saturation: 0,\n        fade: true\n    }\n}) => {\n\nconst speedDay = 0.001\nconst speedNight = 0.001\nconst speedSunrise = 0.00005\nconst speedSunset = 0.00005\n\nconst sunriseStart = .995\nconst sunriseEnd = .055\nconst sunsetStart = .44\nconst sunsetEnd = .55\nconst nightStart = .6\nconst nightEnd = .9\n\nconst [time, setTime] = useState(timeToDeg(initialTime))\n\nuseFrame(() => {\n    if(!timeAnimation){\n        return\n    }\n    const newTime = time + speed\n    setTime(newTime >= 1 ? 0 : newTime)\n})\n\nconst day = useMemo(() => {\n    return time >= sunriseStart || time <= sunsetEnd\n}, [time])\n\nconst night = useMemo(() => {\n    return time >= nightStart && time <= nightEnd\n}, [time])\n\nconst sunrise = useMemo(() => {\n    return time >= sunriseStart || time <= sunriseEnd\n}, [time])\n\nconst sunset = useMemo(() => {\n    return time >= sunsetStart && time <= sunsetEnd\n}, [time])\n\nconst speed = useMemo(() => {\n    if(sunrise){\n        return speedSunrise\n    }\n    if(sunset){\n        return speedSunset\n    }\n    return day ? speedDay : speedNight\n}, [day, sunrise, sunset])\n\nconst position:[number, number, number] = useMemo(() => {\n    const angle = ((time * (Math.PI * 2)) + (Math.PI * 1.5))\n    const y = distance * Math.cos(angle)\n    const z = distance * Math.sin(angle)\n\n    return [sun.azimuth || 0, y, z]\n}, [sun.azimuth, distance, time])\n\nconst ambientLightIntensity = useMemo(() => {\n    \n    const min = .015\n    const max = .5\n    const returnInRange = (intensity:number) => Math.max(Math.min(intensity, max), min)\n\n    if(sunrise){\n        const t = time >= sunriseStart ? time : time + 1\n        const intensity = (t - sunriseStart) / ((sunriseEnd + 1) - sunriseStart)\n        return returnInRange(intensity)\n    }\n\n    if(sunset){\n        const total = sunsetEnd - sunsetStart\n        const intensity = (sunsetEnd - time) / total\n        return returnInRange(intensity)\n    }\n\n    return day ? returnInRange(1) : returnInRange(0)\n    \n}, [time, day, sunrise, sunset])\n\nreturn (<>\n    \n    <hemisphereLight\n        args={['#fff', '#fff']}\n        intensity={ambientLightIntensity}\n        color={new Color('#808020')}\n        groundColor={new Color('#804A40')}\n        position={position}\n    />\n\n    <directionalLight\n        intensity={ambientLightIntensity}\n        color={new Color('#fff')}\n        position={position}\n        castShadow\n    />\n\n    <ambientLight intensity={ambientLightIntensity} />\n\n    <R3fSky\n        turbidity={sun.turbidity}\n        rayleigh={sun.rayleigh}\n        mieCoefficient={sun.mieCoefficient}\n        mieDirectionalG={sun.mieDirectionalG}\n        distance={distance}\n        sunPosition={position}\n    />\n\n    {stars.enabled && night && <Stars\n        radius={distance}\n        depth={stars.depth}\n        count={stars.count}\n        factor={stars.factor}\n        saturation={stars.saturation}\n        fade={stars.fade}\n    />}\n</>)\n\n}\n\nexport default Sky\n","/**\n * 0 = sunrise, .25 = noon, .50 = sunset, .51-.99 = night\n */\n export const timeToDeg = (time:string) => {\n    const totalMinutesInADay = 60 * 24 // 1440\n    const sunDegreesOffset = .25\n    const [hours, mins = 0] = time.split(/[:|h]/i).map(n => parseInt(n) || 0)\n    const degrees = (((hours * 60) + mins) / totalMinutesInADay) - sunDegreesOffset\n    return degrees < 0 ? 1 + degrees : degrees\n}\n\nexport  const degToTime = (degrees:number, separator='h') => {\n    const totalMinutesInADay = 60 * 24 // 1440\n    const sunDegreesOffset = .25\n    let normalizedDegrees = degrees + sunDegreesOffset\n    normalizedDegrees = normalizedDegrees >= 1 ? normalizedDegrees - 1 : normalizedDegrees\n    const totalMins = totalMinutesInADay * normalizedDegrees\n    const hours = Math.floor(totalMins / 60)\n    const mins = Math.floor(totalMins - (hours * 60)).toString().padStart(2, '0')\n    return [hours, mins].join(separator)\n}","import { useRef, useEffect, useMemo } from 'react'\nimport { Plane } from '@react-three/drei'\nimport { PlaneBufferGeometryProps } from 'react-three-fiber'\nimport { useHeightfield } from '@react-three/cannon'\nimport { applyHeights } from '../util/terrain'\n\ninterface TerrainProps {\n    width: number\n    length: number\n    heights: Float32Array\n    unitSize?: number\n}\n\nconst Terrain:React.FC<TerrainProps> = ({\n    width,\n    length,\n    heights,\n    unitSize = 1,\n}) => {\n\n    const terrainGeometryRef = useRef<PlaneBufferGeometryProps>()\n\n    const cannonHeight = useMemo(() => {\n        const heightfield:any[] = []\n\n        for(let z = 0; z < length + 1; z++){\n          const row = []\n          for(let x = 0; x < width + 1; x++){\n            const index = (x * (width + 1)) + z\n            row.push(heights[index])\n          }\n          heightfield.push(row.reverse())\n        }\n\n        return heightfield\n    }, [heights, length, width])\n\n    useHeightfield(() => ({\n        position: [-width / 2, 0, length / 2],\n        mass: 0,\n        rotation: [Math.PI * 1.5, 0, 0],\n        args: [cannonHeight, { elementSize: 1 }] as any\n      }))\n\n    useEffect(() => {\n        if(\n            !terrainGeometryRef.current?.setAttribute ||\n            !terrainGeometryRef.current?.getAttribute ||\n            !terrainGeometryRef.current?.attributes?.normal\n        ){\n            return\n        }\n\n        try {\n            const { array: positions } = terrainGeometryRef.current.getAttribute('position')\n            applyHeights(positions as Float32Array, heights)\n            terrainGeometryRef.current.getAttribute('position').needsUpdate = true\n        } catch(error) {\n            console.error(error)\n        }\n    }, [heights])\n\n    return (\n        <Plane\n          rotation-x={Math.PI * 1.5}\n          receiveShadow\n          castShadow\n          >\n            <planeBufferGeometry\n                ref={terrainGeometryRef}\n                args={[width * unitSize, length * unitSize, width, length]}\n                attach=\"geometry\"\n            />\n            <meshPhongMaterial\n                attach=\"material\"\n                wireframe\n            />\n        </Plane>\n    )\n}\n\nexport default Terrain","import { useEffect, useRef } from \"react\"\nimport { useFrame, useThree } from \"react-three-fiber\"\nimport { Vector3 } from \"three\"\nimport { useSphere } from \"@react-three/cannon\"\n\nimport { useKeyboard } from \"../hooks/useKeyboard\"\n\ninterface PlayerProps {\n    height ?: number\n    position ?: [number, number, number]\n    speed?: number\n    mass?: number\n}\n\nconst frontVector = new Vector3()\nconst sideVector = new Vector3()\nconst direction = new Vector3()\n\nconst Player: React.FC<PlayerProps> = ({\n    height = 5,\n    position = [0, 10, 0],\n    speed = 8,\n    mass = 5,\n}) => {\n    const keys = useKeyboard()\n    const movement = {\n        forward: keys.has('KeyW') || keys.has('ArrowUp'),\n        backward: keys.has('KeyS') || keys.has('ArrowDown'),\n        left: keys.has('KeyA') || keys.has('ArrowLeft'),\n        right: keys.has('KeyD') || keys.has('ArrowRight'),\n    }\n\n    const [ ref, api ] = useSphere(() => ({ mass, type: 'Dynamic', position }))\n    const { camera } = useThree()\n    const velocity = useRef([0, 0, 0])\n\n    useEffect(() => {\n        api.velocity.subscribe((newVelocity) => {\n            velocity.current = newVelocity\n        })\n    }, [api])\n\n    useFrame(() => {\n        if(!ref.current){\n            return\n        }\n\n        const directionVelocity = {\n            forward: movement.forward ? 1 : 0,\n            backward: movement.backward ? 1 : 0,\n            left: movement.left ? 1 : 0,\n            right: movement.right ? 1 : 0,\n        }\n\n        const frontVelocity = directionVelocity.backward - directionVelocity.forward\n        const sideVelocity = directionVelocity.left - directionVelocity.right\n\n        camera.position.copy(ref.current.position)\n        camera.position.setY(camera.position.y + height)\n\n        frontVector.set(0, 0, frontVelocity)\n        sideVector.set(sideVelocity, 0, 0)\n        direction.subVectors(frontVector, sideVector)\n            .normalize()\n            .multiplyScalar(speed)\n            .applyEuler(camera.rotation)\n        api.velocity.set(direction.x, velocity.current[1], direction.z)\n    })\n\n    return <mesh ref={ref}></mesh>\n}\n\nexport default Player","import { useEffect, useState } from \"react\"\n\nexport const useKeyboard = () => {\n    const [ keysDown, setKeysDown ] = useState(new Set<string>())\n\n    const handleKeyDown = (event:KeyboardEvent) => {\n        setKeysDown(keys => new Set(keys).add(event.code))\n    }\n    const handleKeyUp = (event:KeyboardEvent) => {\n        setKeysDown(keys => {\n            const newSet = new Set(keys)\n            newSet.delete(event.code)\n            return newSet\n        })\n    }\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown)\n        document.addEventListener('keyup', handleKeyUp)\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown)\n            document.removeEventListener('keyup', handleKeyUp)\n        }\n    }, [])\n\n    return keysDown\n}","import { useMemo } from 'react'\nimport { useSphere } from '@react-three/cannon'\n\ninterface BallProps {\n    position: [number, number, number]\n    radius ?: number\n    segments ?: number\n}\n\ninterface SphereGeometryInterface {\n    position: [number, number, number]\n    args: [number | undefined, number | undefined, number | undefined]\n}\n\nconst Ball:React.FC<BallProps> = ({\n    position,\n    radius = 1,\n    segments = 15\n}) => {\n\nconst args: SphereGeometryInterface = useMemo(() => {\n    return {\n        position,\n        args: [radius, segments, segments]\n    }\n}, [position, radius, segments])\n\nconst [ ref ] = useSphere(() => ({\n    mass: 1,\n    position,\n    args: radius\n}))\n\nreturn <mesh ref={ref} receiveShadow castShadow>\n    <sphereGeometry attach=\"geometry\" {...args} />\n    <meshPhongMaterial attach=\"material\" color=\"hotpink\" />\n</mesh>\n}\n\nexport default Ball","import { Canvas } from 'react-three-fiber'\nimport { PointerLockControls } from '@react-three/drei'\nimport { Physics } from '@react-three/cannon'\n\nimport { generateSimplexNoise } from '../util/terrain'\nimport Sky from './Sky'\nimport Terrain from './Terrain'\nimport Player from './Player'\nimport Ball from './Ball'\n\n\nconst width = 100\nconst length = 100\nconst smoothness = 4\nconst elevation = 3\n\nconst heights = generateSimplexNoise(width, length, { smoothness, elevation })\n\nconst App:React.FC = () => {\n\n  return (\n    <div className=\"canvas-fullscreen-container\">\n      <Canvas\n        colorManagement\n        shadowMap\n        camera={{ position: [-1, 2, 5], fov: 50 }}\n      >\n\n        <hemisphereLight intensity={0.35} />\n        <spotLight position={[10, 10, 10]} angle={0.3} penumbra={1} intensity={2} castShadow />\n\n        <Physics>\n          \n          <Sky timeAnimation={false} time=\"5h55\" />\n\n          <Terrain width={width} length={length} heights={heights}/>\n\n          <Player />\n\n          <Ball position={[12, 10, -12]} />\n          <Ball position={[-12, 10, -12]} />\n          <Ball position={[12, 10, 12]} />\n          <Ball position={[-12, 10, 12]} />\n          \n        </Physics>\n\n        <PointerLockControls />\n      </Canvas>\n    </div>\n  )\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './styles.css'\n\ndeclare global {\n  namespace JSX {\n   interface IntrinsicElements {\n      axisHelper: object\n    }\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}